{"version":3,"sources":["NCard.js","sData.js","Netflix.js","serviceWorker.js","index.js"],"names":["NCard","props","className","src","imgsrc","alt","series","href","link","target","rel","sData","key","ser","Netflix","map","val","id","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mTAeeA,MAZf,SAAeC,GACX,OACI,yBAAKC,UAAU,QACX,yBAAKC,IAAKF,EAAMG,OAAQC,IAAI,KAAKH,UAAU,QAC3C,4BAAKD,EAAMK,QACX,uBAAGC,KAAMN,EAAMO,KAAMC,OAAO,SAASC,IAAI,uBACrC,4BAAQR,UAAU,aAAlB,gBCwBDS,EAjCD,CACV,CACIR,IAAI,sEACJS,IAAI,EACJC,IAAI,kBACJL,KAAK,6CAET,CACIL,IAAI,mNACJS,IAAI,EACJC,IAAI,SACJL,KAAK,6CAET,CACIL,IAAI,gIACJS,IAAI,EACJC,IAAI,aACJL,KAAK,6CAET,CACIL,IAAI,sEACJS,IAAI,EACJC,IAAI,cACJL,KAAK,6CAET,CACIL,IAAI,0EACJS,IAAI,EACJC,IAAI,OACJL,KAAK,8CCNEM,E,uKAfP,OACI,6BACG,wBAAIZ,UAAU,UAAd,WACA,yBAAKA,UAAU,iBACdS,EAAMI,KAAI,SAACC,GACR,OAAO,kBAAC,EAAD,CAAOC,GAAID,EAAIJ,IAAKR,OAAQY,EAAIb,IAAKG,OAAQU,EAAIH,IAAKL,KAAMQ,EAAIR,gB,GARpEU,IAAMC,WCORC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cc1d721d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./NCard.css\";\r\n\r\nfunction NCard(props){\r\n    return(\r\n        <div className=\"card\">\r\n            <img src={props.imgsrc} alt=\"im\" className=\"img\"/>\r\n            <h3>{props.series}</h3>\r\n            <a href={props.link} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                <button className=\"btn-watch\">Watch Now</button>\r\n            </a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NCard;","const sData = [\r\n    {\r\n        src:\"https://upload.wikimedia.org/wikipedia/en/7/7a/ST3LambertPoster.png\",\r\n        key:1,\r\n        ser:\"Stranger Things\",\r\n        link:\"https://www.netflix.com/in/title/80057281\"\r\n    },\r\n    {\r\n        src:\"https://occ-0-300-299.1.nflxso.net/dnm/api/v6/XsrytRUxks8BtTRf9HNlZkW2tvY/AAAABTo5U9ByAGDUDO1NJG2mUGvh-xte2ma4z_9C8BFi8e8H_FGk0TH5JDLUE8VrpqkpKrLO15ZfR7Ngvoq_byB9dv9YMSsviWlIbE0Kz4FEt4-3Kz8E4BJk5oiFxjobLg.jpg\",\r\n        key:2,\r\n        ser:\"Glitch\",\r\n        link:\"https://www.netflix.com/in/title/80108495\"\r\n    },\r\n    {\r\n        src:\"https://m.media-amazon.com/images/M/MV5BNWNmYzQ1ZWUtYTQ3ZS00Y2UwLTlkMDctZThlOTJkMGJiNzBiXkEyXkFqcGdeQXVyNjg2NjQwMDQ@._V1_.jpg\",\r\n        key:3,\r\n        ser:\"Mindhunter\",\r\n        link:\"https://www.netflix.com/in/title/80114855\"\r\n    },\r\n    {\r\n        src:\"https://cdn-s3.sidereel.com/tv_shows/78983/giant_2x/Locke___Key.jpg\",\r\n        key:4,\r\n        ser:\"Locke & Key\",\r\n        link:\"https://www.netflix.com/in/title/80241239\"\r\n    },\r\n    {\r\n        src:\"https://i.pinimg.com/564x/1e/17/e8/1e17e88b19f6a74a17a873bcc19b9a54.jpg\",\r\n        key:5,\r\n        ser:\"Dark\",\r\n        link:\"https://www.netflix.com/in/title/80100172\"\r\n    }\r\n]\r\n\r\nexport default sData;","import React from \"react\";\r\nimport './Netflix.css';\r\nimport NCard from \"./NCard\";\r\nimport sData from \"./sData\";\r\n\r\nclass Netflix extends React.Component{\r\n    render(){  \r\n    // let tag = \"My Favourite Ones\";\r\n        return(\r\n            <div>\r\n               <h1 className=\"header\">Netflix</h1>\r\n               <div className=\"cardContainer\">\r\n               {sData.map((val) => {\r\n                   return <NCard id={val.key} imgsrc={val.src} series={val.ser} link={val.link}/>\r\n               })}\r\n               {/* <p>{`These are ${tag} in the world of Netflix.`}</p>\r\n               The above is ES6 Equivalent to - \"These are \" + tag + \" in the world of Netflix.\" of ES5. */}\r\n               </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Netflix;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport Netflix from \"./Netflix\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Netflix />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}